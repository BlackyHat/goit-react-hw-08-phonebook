{"version":3,"file":"static/js/285.6e795e2f.chunk.js","mappings":"gRAiBA,EAXsB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAUC,GAAY,YAC7C,GAAsBC,EAAAA,EAAAA,IAASD,GAA/B,eAAOE,EAAP,KAAcC,EAAd,KACA,OACE,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAASF,EAAKG,QAA3C,WACE,SAAC,IAAD,UAAYP,KACZ,SAAC,MAAD,gBAAOQ,GAAIC,EAAAA,GAAWN,GAAWF,KACjC,SAAC,KAAD,UAAmBG,EAAKE,UAG7B,C,uDCYD,IAvBoB,WAClB,IAAMI,GAAQC,EAAAA,EAAAA,KAGRC,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxBJ,EAAM,CACJK,YAAaF,EACbC,OAAAA,EACAE,SAAU,MACVC,YAAY,EACZC,QAAS,QACTC,SAAU,KAEb,EAOD,OALAP,EAASQ,UAAY,CACnBP,KAAMQ,IAAAA,OAAAA,WACNP,OAAQO,IAAAA,OAAAA,YAGH,CAAET,SAAAA,EACV,C,wHCfKU,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KACHG,SAAS,uBACTC,IAAI,EAAG,2BACPC,IAAI,GAAI,0BACXC,SAAUN,EAAAA,KACPG,SAAS,qBACTC,IAAI,EAAG,uCACPC,IAAI,GAAI,uCACXE,MAAOP,EAAAA,KACJG,SAAS,mBACTC,IAAI,EAAG,uBACPC,IAAI,GAAI,wBAGPG,EAAgB,CACpBN,KAAM,GACNI,SAAU,GACVC,MAAO,IAgET,UA7De,WACb,IAAME,GAAWC,EAAAA,EAAAA,MACTrB,GAAasB,EAAAA,EAAAA,KAAbtB,SAYR,OACE,SAAC,KAAD,CACEmB,cAAeA,EACfI,iBAAkBb,EAClBc,SAdiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBb,EAA0BY,EAA1BZ,KAAMK,EAAoBO,EAApBP,MAAOD,EAAaQ,EAAbR,SACrBG,GAASO,EAAAA,EAAAA,IAAS,CAAEd,KAAAA,EAAMK,MAAAA,EAAOD,SAAAA,KACjCS,IACA1B,EAAS,CACPC,KAAK,GAAD,OAAKY,EAAKe,cAAV,uBACJ1B,OAAQ,WAEX,EAGC,SAKG,SAAA2B,GAAM,OACL,UAAC,KAAD,CAAKjC,GAAG,OAAO4B,SAAUK,EAAOC,aAAcC,EAAE,OAAOC,GAAG,KAA1D,WACE,SAAC,IAAD,CACE5C,MAAM,QACN6C,KAAK,OACLpB,KAAK,OACLC,UAAQ,EACRoB,YAAY,mBACZC,GAAG,OAEL,SAAC,IAAD,CACE/C,MAAM,WACNyB,KAAK,WACLoB,KAAK,WACLnB,UAAQ,EACRqB,GAAG,IACHD,YAAY,yBAEd,SAAC,IAAD,CACE9C,MAAM,SACNyB,KAAK,QACLoB,KAAK,QACLnB,UAAQ,EACRoB,YAAY,uBAEd,SAAC,IAAD,CACED,KAAK,SACLG,YAAY,OACZ9B,QAAQ,UACR+B,GAAG,IACHN,EAAE,OACFO,aAAcT,EAAOU,SAAWV,EAAOW,OANzC,uBAzBG,GAuCZ,C","sources":["components/FormTextField/FormTextField.jsx","components/Toast/Toast.jsx","pages/Register.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormControl, FormLabel, FormErrorMessage } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\n\nconst FormTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl isInvalid={meta.error && meta.touched}>\n      <FormLabel>{label}</FormLabel>\n      <Field as={Input} {...field} {...props} />\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default FormTextField;\n\nFormTextField.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { useToast } from '@chakra-ui/react';\n\nconst CustomToast = () => {\n  const toast = useToast();\n  // types are: \"success\", \"info\", \"warning\", \"error\"\n\n  const addToast = ({ info, status }) => {\n    toast({\n      description: info,\n      status,\n      position: 'top',\n      isClosable: true,\n      variant: 'solid',\n      duration: 5000,\n    });\n  };\n\n  addToast.propTypes = {\n    info: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  };\n\n  return { addToast };\n};\n\nexport default CustomToast;\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport CustomToast from 'components/Toast';\n\nimport { Box, Button } from '@chakra-ui/react';\nimport FormTextField from 'components/FormTextField';\n\nconst schemaAddContact = Yup.object().shape({\n  name: Yup.string()\n    .required('Login name required')\n    .min(4, 'Login name is too short')\n    .max(32, 'Login name is too long'),\n  password: Yup.string()\n    .required('Password required')\n    .min(4, 'Password is too short, min 4 digits')\n    .max(32, 'Password is too long, max 32 digits'),\n  email: Yup.string()\n    .required('E-mail required')\n    .min(4, 'E-mail is too short')\n    .max(32, 'E-mail is too long'),\n});\n\nconst initialValues = {\n  name: '',\n  password: '',\n  email: '',\n};\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n  const { addToast } = CustomToast();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    dispatch(register({ name, email, password }));\n    resetForm();\n    addToast({\n      info: `${name.toUpperCase()} welcome to the app`,\n      status: 'success',\n    });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schemaAddContact}\n      onSubmit={handleSubmit}\n    >\n      {formik => (\n        <Box as=\"form\" onSubmit={formik.handleSubmit} w=\"100%\" py=\"28\">\n          <FormTextField\n            label=\"Login\"\n            type=\"text\"\n            name=\"name\"\n            required\n            placeholder=\"input your login\"\n            mb=\"4\"\n          />\n          <FormTextField\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            required\n            mb=\"4\"\n            placeholder=\"input your password\"\n          />\n          <FormTextField\n            label=\"E-mail\"\n            name=\"email\"\n            type=\"email\"\n            required\n            placeholder=\"input your e-mail\"\n          />\n          <Button\n            type=\"submit\"\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            mt=\"8\"\n            w=\"100%\"\n            isDisabled={!(formik.isValid && formik.dirty)}\n          >\n            Sign up\n          </Button>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignUp;\n"],"names":["label","props","useField","field","meta","isInvalid","error","touched","as","Input","toast","useToast","addToast","info","status","description","position","isClosable","variant","duration","propTypes","PropTypes","schemaAddContact","Yup","shape","name","required","min","max","password","email","initialValues","dispatch","useDispatch","CustomToast","validationSchema","onSubmit","values","resetForm","register","toUpperCase","formik","handleSubmit","w","py","type","placeholder","mb","colorScheme","mt","isDisabled","isValid","dirty"],"sourceRoot":""}