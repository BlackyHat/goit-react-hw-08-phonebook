{"version":3,"file":"static/js/897.de4664db.chunk.js","mappings":"gRAiBA,EAXsB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAUC,GAAY,YAC7C,GAAsBC,EAAAA,EAAAA,IAASD,GAA/B,eAAOE,EAAP,KAAcC,EAAd,KACA,OACE,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAASF,EAAKG,QAA3C,WACE,SAAC,IAAD,UAAYP,KACZ,SAAC,MAAD,gBAAOQ,GAAIC,EAAAA,GAAWN,GAAWF,KACjC,SAAC,KAAD,UAAmBG,EAAKE,UAG7B,C,uDCYD,IAvBoB,WAClB,IAAMI,GAAQC,EAAAA,EAAAA,KAGRC,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxBJ,EAAM,CACJK,YAAaF,EACbC,OAAAA,EACAE,SAAU,MACVC,YAAY,EACZC,QAAS,QACTC,SAAU,KAEb,EAOD,OALAP,EAASQ,UAAY,CACnBP,KAAMQ,IAAAA,OAAAA,WACNP,OAAQO,IAAAA,OAAAA,YAGH,CAAET,SAAAA,EACV,C,yHCfKU,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KACJG,SAAS,wBACTC,IAAI,EAAG,4BACPC,IAAI,GAAI,2BACXC,SAAUN,EAAAA,KACPG,SAAS,4BACTC,IAAI,EAAG,qDACPC,IAAI,GAAI,sDAGPE,EAAgB,CACpBL,MAAO,GACPI,SAAU,IAuDZ,UApDkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MACTpB,GAAaqB,EAAAA,EAAAA,KAAbrB,SAWR,OACE,SAAC,KAAD,CACEkB,cAAeA,EACfI,iBAAkBZ,EAClBa,SAbiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBZ,EAAoBW,EAApBX,MAAOI,EAAaO,EAAbP,SACfE,GAASO,EAAAA,EAAAA,IAAM,CAAEb,MAAAA,EAAOI,SAAAA,KACxBQ,IACAzB,EAAS,CACPC,KAAK,eACLC,OAAQ,WAEX,EAEC,SAKG,SAAAyB,GAAM,OACL,UAAC,KAAD,CAAK/B,GAAG,OAAO2B,SAAUI,EAAOC,aAAcC,GAAG,KAAKC,EAAE,OAAxD,WACE,SAAC,IAAD,CACE1C,MAAM,SACN2C,KAAK,QACLC,KAAK,QACLlB,UAAQ,EACRmB,YAAY,oBACZC,GAAG,OAEL,SAAC,IAAD,CACE9C,MAAM,WACN4C,KAAK,WACLD,KAAK,WACLjB,UAAQ,EACRmB,YAAY,yBAEd,SAAC,IAAD,CACEF,KAAK,SACLI,YAAY,OACZ7B,QAAQ,UACR8B,GAAG,IACHN,EAAE,OACFO,aAAcV,EAAOW,SAAWX,EAAOY,OANzC,sBAjBG,GA+BZ,C","sources":["components/FormTextField/FormTextField.jsx","components/Toast/Toast.jsx","pages/LogInPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormControl, FormLabel, FormErrorMessage } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\n\nconst FormTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl isInvalid={meta.error && meta.touched}>\n      <FormLabel>{label}</FormLabel>\n      <Field as={Input} {...field} {...props} />\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default FormTextField;\n\nFormTextField.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { useToast } from '@chakra-ui/react';\n\nconst CustomToast = () => {\n  const toast = useToast();\n  // types are: \"success\", \"info\", \"warning\", \"error\"\n\n  const addToast = ({ info, status }) => {\n    toast({\n      description: info,\n      status,\n      position: 'top',\n      isClosable: true,\n      variant: 'solid',\n      duration: 5000,\n    });\n  };\n\n  addToast.propTypes = {\n    info: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  };\n\n  return { addToast };\n};\n\nexport default CustomToast;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operations';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport CustomToast from 'components/Toast';\n\nimport { Box, Button } from '@chakra-ui/react';\nimport FormTextField from 'components/FormTextField';\n\nconst schemaAddContact = Yup.object().shape({\n  email: Yup.string()\n    .required('E-mail name required')\n    .min(4, 'E-mail name is too short')\n    .max(32, 'E-mail name is too long'),\n  password: Yup.string()\n    .required('Password number required')\n    .min(7, 'Password number is too short, must be 7-10 digits')\n    .max(32, 'Password number is too long, must be 7-10 digits'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LogInPage = () => {\n  const dispatch = useDispatch();\n  const { addToast } = CustomToast();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(logIn({ email, password }));\n    resetForm();\n    addToast({\n      info: `Welcome back`,\n      status: 'success',\n    });\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schemaAddContact}\n      onSubmit={handleSubmit}\n    >\n      {formik => (\n        <Box as=\"form\" onSubmit={formik.handleSubmit} py=\"32\" w=\"100%\">\n          <FormTextField\n            label=\"E-mail\"\n            type=\"email\"\n            name=\"email\"\n            required\n            placeholder=\"input your e-mail\"\n            mb=\"4\"\n          />\n          <FormTextField\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            required\n            placeholder=\"input your password\"\n          />\n          <Button\n            type=\"submit\"\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            mt=\"8\"\n            w=\"100%\"\n            isDisabled={!(formik.isValid && formik.dirty)}\n          >\n            Log in\n          </Button>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default LogInPage;\n"],"names":["label","props","useField","field","meta","isInvalid","error","touched","as","Input","toast","useToast","addToast","info","status","description","position","isClosable","variant","duration","propTypes","PropTypes","schemaAddContact","Yup","shape","email","required","min","max","password","initialValues","dispatch","useDispatch","CustomToast","validationSchema","onSubmit","values","resetForm","logIn","formik","handleSubmit","py","w","type","name","placeholder","mb","colorScheme","mt","isDisabled","isValid","dirty"],"sourceRoot":""}