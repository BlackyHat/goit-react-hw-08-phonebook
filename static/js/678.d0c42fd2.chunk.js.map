{"version":3,"file":"static/js/678.d0c42fd2.chunk.js","mappings":"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","sources":["components/FormTextField/FormTextField.jsx","redux/selectors.js","components/FilterContacts/FilterContacts.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/BasicModal/BasicModal.jsx","hooks/useToggle.js","pages/Contacts.jsx"],"sourcesContent":["import { FormControl, FormLabel, FormErrorMessage } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\n\nexport const FormTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormControl isInvalid={meta.error && meta.touched}>\n      <FormLabel>{label}</FormLabel>\n      <Field as={Input} {...field} {...props} />\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilterValue = state => state.filters.value;\n","import { getFilterValue } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nimport PropTypes from 'prop-types';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { Box, Flex, Input, IconButton } from '@chakra-ui/react';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n  const changeFilter = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Box textAlign=\"left\">\n      Find contacts by name\n      <Flex as=\"form\" gap=\"2\">\n        <Input\n          placeholder=\"Try to search somebody...\"\n          type=\"text\"\n          name=\"key\"\n          value={filter}\n          required\n          onChange={changeFilter}\n          _hover={{ fontWeight: 'semibold' }}\n        />\n        <IconButton\n          colorScheme=\"teal\"\n          aria-label=\"Search database\"\n          icon={<Search2Icon />}\n        />\n      </Flex>\n    </Box>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  changeFilter: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const FilteredList = styled.ul`\n  margin: 8px 0 60px;\n  text-align: left;\n  padding: 0 16px;\n  list-style-position: outside;\n  min-height: 200px;\n`;\nexport const FilteredListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 4px;\n\n  & img {\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n  }\n\n  & p {\n    margin: 0;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 8px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilterValue } from 'redux/selectors';\nimport { deleteContact } from 'redux/operations';\nimport PropTypes from 'prop-types';\nimport { Button } from '@chakra-ui/react';\n\nimport { BsTelephoneForward, BsPersonX } from 'react-icons/bs';\nimport { FilteredList, FilteredListItem } from './ContactList.styled';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n\n  const onDeleteContact = delContactId => {\n    dispatch(deleteContact(delContactId));\n  };\n\n  const getFilteredContacts = () => {\n    const normaliziedFilter = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normaliziedFilter)\n    );\n  };\n\n  const filteredContactsList = getFilteredContacts();\n  return (\n    <>\n      {items.length > 0 && (\n        <FilteredList>\n          {filteredContactsList.map(({ id, name, number }) => {\n            return (\n              <FilteredListItem key={id}>\n                <p>\n                  <BsTelephoneForward />\n                  {name + ': ' + number}{' '}\n                </p>\n                <Button\n                  colorScheme=\"red\"\n                  type=\"button\"\n                  variant=\"outline\"\n                  align=\"center\"\n                  size=\"sm\"\n                  onClick={() => onDeleteContact(id)}\n                >\n                  <BsPersonX size={14} />\n                </Button>\n              </FilteredListItem>\n            );\n          })}\n        </FilteredList>\n      )}\n    </>\n  );\n}\n\nContactList.propTypes = {\n  filteredContactsList: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { Formik } from 'formik';\n\nimport * as Yup from 'yup';\n\nimport { Box, Button } from '@chakra-ui/react';\nimport { FormTextField } from 'components/FormTextField/FormTextField';\n\nconst schemaAddContact = Yup.object().shape({\n  name: Yup.string()\n    .required('User name required')\n    .min(4, 'Contact name is too short')\n    .max(32, 'Contact name is too long'),\n  number: Yup.string()\n    .required('Phone number required')\n    .min(7, 'Phone number is too short, must be 7-10 digits')\n    .max(10, 'Phone number is too long, must be 7-10 digits'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    addNewContact(values);\n    resetForm();\n  };\n\n  const addNewContact = newContact => {\n    checkDouble(newContact)\n      ? alert(`${newContact.name} is already exist in contacts`)\n      : dispatch(addContact(newContact));\n  };\n  const checkDouble = newContact => {\n    return items.some(\n      ({ name }) => name.toLowerCase() === newContact.name.toLowerCase()\n    );\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schemaAddContact}\n      onSubmit={handleSubmit}\n    >\n      {formik => (\n        <Box as=\"form\" onSubmit={formik.handleSubmit}>\n          <FormTextField\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            required\n            autoComplete=\"false\"\n            placeholder=\"input your name\"\n          />\n          <FormTextField\n            label=\"Number\"\n            name=\"number\"\n            type=\"tel\"\n            required\n            placeholder=\"input your number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <Button type=\"submit\" colorScheme=\"teal\" variant=\"outline\" mt=\"8\">\n            Add contact\n          </Button>\n        </Box>\n      )}\n    </Formik>\n  );\n}\n","import { useToggle } from 'hooks/useToggle';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\n\nconst BasicModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useToggle();\n\n  return (\n    <>\n      <Button\n        leftIcon={<AddIcon />}\n        onClick={onOpen}\n        colorScheme=\"teal\"\n        variant=\"outline\"\n      >\n        Add\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent pb=\"8\" textAlign=\"center\">\n          <ModalHeader>Add new contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{children}</ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default BasicModal;\n","import { useState } from 'react';\n\nexport const useToggle = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const onOpen = () => setIsOpen(true);\n  const onClose = () => setIsOpen(false);\n  const toggle = () => setIsOpen(isOpen => !isOpen);\n\n  return { isOpen, onOpen, onClose, toggle };\n};\n","import { useSelector } from 'react-redux';\nimport { getIsLoading, getError } from 'redux/selectors';\n\n// import Section from 'components/Section/Section';\nimport Filter from 'components/FilterContacts/FilterContacts';\nimport ContactList from 'components/ContactList/ContactList';\n// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { fetchContacts } from 'redux/operations';\n\nimport { Box, Flex, Text } from '@chakra-ui/react';\nimport { LoginButtons } from 'components/LoginButtons/LoginButtons';\n// import WelcomeLogo from './welcome_logo.jpg';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport BasicModal from 'components/BasicModal/BasicModal';\nimport { useAuth } from 'hooks/useAuth';\n\nconst Contacts = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const { isLoggedIn } = useAuth();\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch(fetchContacts());\n  // }, [dispatch]);\n\n  return (\n    <Box w=\"100%\">\n      {!isLoggedIn ? (\n        <Box\n          w=\"100%\"\n          justify=\"center\"\n          align=\"center\"\n          direction=\"column\"\n          py=\"24\"\n          // bgImage={`url('${WelcomeLogo}')`}\n          bgPosition=\"center\"\n          bgRepeat=\"no-repeat\"\n        >\n          <Text as=\"h1\" mb=\"12\" fontSize=\"36\" p=\"8\">\n            Welcome to iBook Contacts service\n          </Text>\n          <LoginButtons gap=\"8\" />\n        </Box>\n      ) : (\n        <>\n          {' '}\n          <Flex align=\"center\" justify=\"space-between\" mb=\"4\">\n            <Text as=\"h2\" fontSize=\"xl\">\n              Contacts\n            </Text>\n            <BasicModal>\n              <ContactForm />\n            </BasicModal>\n          </Flex>\n          <Filter />\n          {isLoading && !error && <p>Loading...</p>}\n          <ContactList />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormTextField","label","props","useField","field","meta","isInvalid","error","touched","as","Input","getContacts","state","contacts","items","getIsLoading","isLoading","getError","getFilterValue","filters","value","Filter","dispatch","useDispatch","filter","useSelector","textAlign","gap","I","placeholder","type","name","required","onChange","e","updateFilter","currentTarget","_hover","fontWeight","colorScheme","icon","FilteredList","styled","FilteredListItem","ContactList","filteredContactsList","normaliziedFilter","toLowerCase","includes","getFilteredContacts","length","map","id","number","variant","align","size","onClick","delContactId","deleteContact","schemaAddContact","Yup","shape","min","max","initialValues","ContactForm","addNewContact","newContact","checkDouble","alert","addContact","some","validationSchema","onSubmit","values","resetForm","console","log","formik","handleSubmit","autoComplete","title","mt","children","useState","isOpen","setIsOpen","onOpen","onClose","toggle","useToggle","leftIcon","pb","isLoggedIn","useAuth","w","justify","mb","fontSize","direction","py","bgPosition","bgRepeat","p","LoginButtons","L"],"sourceRoot":""}