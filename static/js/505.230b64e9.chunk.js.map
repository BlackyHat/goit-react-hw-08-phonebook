{"version":3,"file":"static/js/505.230b64e9.chunk.js","mappings":"iOASMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KACHG,SAAS,uBACTC,IAAI,EAAG,2BACPC,IAAI,GAAI,0BACXC,SAAUN,EAAAA,KACPG,SAAS,qBACTC,IAAI,EAAG,uCACPC,IAAI,GAAI,uCACXE,MAAOP,EAAAA,KACJG,SAAS,kBACTC,IAAI,EAAG,sBACPC,IAAI,GAAI,uBAGPG,EAAgB,CACpBN,KAAM,GACNI,SAAU,GACVC,MAAO,IA2DT,UAxDe,WACb,IAAME,GAAWC,EAAAA,EAAAA,MASjB,OACE,SAAC,KAAD,CACEF,cAAeA,EACfG,iBAAkBZ,EAClBa,SAXiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZ,IAAQX,EAA0BW,EAA1BX,KAAMK,EAAoBM,EAApBN,MAAOD,EAAaO,EAAbP,SACrBG,GAASQ,EAAAA,EAAAA,IAAS,CAAEf,KAAAA,EAAMK,MAAAA,EAAOD,SAAAA,KACjCQ,GACD,EAGC,SAKG,SAAAI,GAAM,OACL,UAAC,KAAD,CAAKC,GAAG,OAAOP,SAAUM,EAAOE,aAAcC,EAAE,OAAOC,GAAG,KAA1D,WACE,SAAC,IAAD,CACEC,MAAM,QACNC,KAAK,OACLtB,KAAK,OACLC,UAAQ,EACRsB,YAAY,mBACZC,GAAG,OAEL,SAAC,IAAD,CACEH,MAAM,WACNrB,KAAK,WACLsB,KAAK,WACLrB,UAAQ,EACRuB,GAAG,IACHD,YAAY,yBAEd,SAAC,IAAD,CACEF,MAAM,SACNrB,KAAK,QACLsB,KAAK,QACLrB,UAAQ,EACRsB,YAAY,uBAEd,SAAC,IAAD,CACED,KAAK,SACLG,YAAY,OACZC,QAAQ,UACRC,GAAG,IACHR,EAAE,OALJ,uBAzBG,GAsCZ,C","sources":["pages/SignUp.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { Box, Button } from '@chakra-ui/react';\nimport { FormTextField } from 'components/FormTextField/FormTextField';\n\nconst schemaAddContact = Yup.object().shape({\n  name: Yup.string()\n    .required('Login name required')\n    .min(4, 'Login name is too short')\n    .max(32, 'Login name is too long'),\n  password: Yup.string()\n    .required('Password required')\n    .min(4, 'Password is too short, min 4 digits')\n    .max(32, 'Password is too long, max 32 digits'),\n  email: Yup.string()\n    .required('Email required')\n    .min(4, 'Email is too short')\n    .max(32, 'Email is too long'),\n});\n\nconst initialValues = {\n  name: '',\n  password: '',\n  email: '',\n};\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    const { name, email, password } = values;\n    dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schemaAddContact}\n      onSubmit={handleSubmit}\n    >\n      {formik => (\n        <Box as=\"form\" onSubmit={formik.handleSubmit} w=\"100%\" py=\"28\">\n          <FormTextField\n            label=\"Login\"\n            type=\"text\"\n            name=\"name\"\n            required\n            placeholder=\"input your login\"\n            mb=\"4\"\n          />\n          <FormTextField\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            required\n            mb=\"4\"\n            placeholder=\"input your password\"\n          />\n          <FormTextField\n            label=\"E-mail\"\n            name=\"email\"\n            type=\"email\"\n            required\n            placeholder=\"input your e-mail\"\n          />\n          <Button\n            type=\"submit\"\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            mt=\"8\"\n            w=\"100%\"\n          >\n            Sign up\n          </Button>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignUp;\n"],"names":["schemaAddContact","Yup","shape","name","required","min","max","password","email","initialValues","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","console","log","register","formik","as","handleSubmit","w","py","label","type","placeholder","mb","colorScheme","variant","mt"],"sourceRoot":""}